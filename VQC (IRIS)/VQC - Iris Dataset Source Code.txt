VQC - Iris Dataset Source Code

# Importing standard Qiskit libraries
from qiskit import QuantumCircuit, transpile
from qiskit.visualization import *
from ibm_quantum_widgets import *

# qiskit-ibmq-provider has been deprecated.
# Please see the Migration Guides in https://ibm.biz/provider_migration_guide for more detail.
from qiskit_ibm_runtime import QiskitRuntimeService, Sampler, Estimator, Session, Options

# Loading your IBM Quantum account(s)
service = QiskitRuntimeService(channel="ibm_quantum")

# Invoke a primitive. For more details see https://docs.quantum.ibm.com/run/primitives
# result = Sampler().run(circuits).result()

#installing the necessary packages

!pip install qiskit_machine_learning
!pip install qiskit_optimization

#importing libraries

import warnings
warnings.filterwarnings("ignore")

import numpy as np
from qiskit_aer import AerSimulator
from qiskit.circuit.library import ZZFeatureMap
from qiskit_machine_learning.algorithms import VQC
from qiskit_algorithms.optimizers import COBYLA
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# Set random seed for reproducibility

np.random.seed(60)

#loading the iris dataset

iris = datasets.load_iris()
features = iris.data
labels = iris.target

# Printing the first 5 rows of the features of the dataset

print("First 5 rows of the features of the dataset:\n")
print(features[:5])

# Printing the first 5 labels

print("First 5 labels of the dataset:\n")
print(labels[:5])

#preprocessing the data

features = MinMaxScaler(feature_range=(0, 1)).fit_transform(features)

print("Features after applying MinMaxScaler:\n")
print(features[:5])

# Splitting the dataset into training and test sets

train_features, test_features, train_labels, test_labels = train_test_split(features, labels, train_size=0.8, random_state=30)

# Set up quantum feature map
num_qubits = features.shape[1]
feature_map = ZZFeatureMap(feature_dimension=num_qubits, reps=2, entanglement="linear")
print(feature_map)

# Set up VQC model with COBYLA optimizer
optimizer = COBYLA(maxiter=100)
vqc = VQC(optimizer=optimizer, feature_map=feature_map)

# Train the VQC model
vqc.fit(train_features, train_labels)

# Predicting labels for test_features

pred_labels = vqc.predict(test_features)
